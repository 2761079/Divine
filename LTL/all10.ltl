#define p0_1 (P_Rbt1.observe)
#define p0_2 (P_Rbt2.observe)
#define p0_3 (P_Rbt3.observe)

#define p1 (P_Rbt1.plus || P_Rbt1.moins || P_Rbt1.stop)
#define p2 (P_Rbt2.plus || P_Rbt2.moins || P_Rbt2.stop)
#define p3 (P_Rbt3.plus || P_Rbt3.moins || P_Rbt3.stop)

#define m0_1 (map[0]==1)
#define m1_1 (map[1]==1)
#define m2_1 (map[2]==1)
#define m3_1 (map[3]==1)
#define m4_1 (map[4]==1)
#define m5_1 (map[5]==1)
#define m6_1 (map[6]==1)
#define m7_1 (map[7]==1)
#define m8_1 (map[8]==1)
#define m9_1 (map[9]==1)

#define m0_2 (map[0]==2)
#define m1_2 (map[1]==2)
#define m2_2 (map[2]==2)
#define m3_2 (map[3]==2)
#define m4_2 (map[4]==2)
#define m5_2 (map[5]==2)
#define m6_2 (map[6]==2)
#define m7_2 (map[7]==2)
#define m8_2 (map[8]==2)
#define m9_2 (map[9]==2)

#define m0_3 (map[0]==3)
#define m1_3 (map[1]==3)
#define m2_3 (map[2]==3)
#define m3_3 (map[3]==3)
#define m4_3 (map[4]==3)
#define m5_3 (map[5]==3)
#define m6_3 (map[6]==3)
#define m7_3 (map[7]==3)
#define m8_3 (map[8]==3)
#define m9_3 (map[9]==3)

#define env (P_env.FAIL)


#property ((G(env) -> G((F m0_1) && (F m1_1) && (F m2_1) && (F m3_1) && (F m4_1) && (F m5_1) && (F m6_1) && (F m7_1) && (F m8_1) && (F m9_1) && (F m0_2) && (F m1_2) && (F m2_2) && (F m3_2) && (F m4_2) && (F m5_2) && (F m6_2) && (F m7_2) && (F m8_2) && (F m9_2) && (F m0_3) && (F m1_3) && (F m2_3) && (F m3_3) && (F m4_3) && (F m5_3) && (F m6_3) && (F m7_3) && (F m8_3) && (F m9_3))) && G(P_env.bad))
